---

- name: Airflow | Ensure Airflow group
  ansible.builtin.group:
    name: "{{ airflow_group }}"
  become: true

- name: Airflow | Ensure Airflow user
  ansible.builtin.user:
    name: "{{ airflow_user }}"
    group: "{{ airflow_group }}"
    system: true
    shell: "{{ airflow_shell }}"
    createhome: "{{ airflow_createhome }}"
    home: "{{ airflow_user_home }}"
  become: true

- name: Airflow | Ensure airflow skeleton paths
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "{{ airflow_user }}"
    group: "{{ airflow_group }}"
    state: directory
  with_items: "{{ airflow_skeleton_paths }}"

- name: Airflow | Copy profile.d file
  ansible.builtin.template:
    src: airflow-profile.d-file.j2
    dest: "/etc/profile.d/airflow.sh"
    mode: 0644

- name: Airflow | Installing dependencies
  ansible.builtin.apt:
    pkg: "{{ airflow_required_libs }}"
    state: present
    update_cache: true

# See https://airflow.apache.org/docs/apache-airflow/stable/installation.html#installation-tools
- name: Airflow | Install pip "{{ airflow_pip_version }}" version
  pip:
    name: pip
    version: "{{ airflow_pip_version }}"
  when: airflow_pip_version is defined

- name: Airflow | Install virtualenv
  pip:
    executable: "{{ airflow_pip_executable }}"
    name: virtualenv

- name: Airflow | Check if exists virtualenv
  stat:
    path: "{{ airflow_app_home }}/pyvenv.cfg"
  register: virtualenv_check

- name: Airflow | Set a virtualenv
  become: true
  become_user: "{{ airflow_user }}"
  command: "virtualenv -p python{{ airflow_python_version | default(omit) }} {{ airflow_app_home }}"
  when: not virtualenv_check.stat.exists

- name: Airflow | Installing Python pip dependencies
  become: true
  become_user: "{{ airflow_user }}"
  ansible.builtin.pip:
    name: "{{ item.name }}"
    version: "{{ item.version | default(omit) }}"
    virtualenv: "{{ airflow_app_home }}"
    virtualenv_python: "python{{ airflow_python_version | default(omit) }}"
  with_items: "{{ airflow_required_python_packages }}"
  when: airflow_required_python_packages is defined

- name: Airflow | Installing proper Celery version
  become: true
  become_user: "{{ airflow_user }}"
  pip:
    name: celery
    version: "{{ celery_version }}"
    virtualenv: "{{ airflow_app_home }}"
    virtualenv_python: "python{{ airflow_python_version | default(omit) }}"
  when:
    - airflow_executor == "CeleryExecutor"
    - airflow_version is version( '2.0.0', '<')

- name: Airflow | Installing extra Celery packages
  become: true
  become_user: "{{ airflow_user }}"
  pip:
    name: celery[{{ item }}]
    version: "{{ celery_version }}"
    virtualenv: "{{ airflow_app_home }}"
    virtualenv_python: "python{{ airflow_python_version | default(omit) }}"
  with_items: "{{ celery_extra_packages }}"
  when:
    - airflow_executor == "CeleryExecutor" and celery_extra_packages
    - airflow_version is version( '2.0.0', '<')

- name: Airflow | Installing Airflow
  become: true
  become_user: "{{ airflow_user }}"
  ansible.builtin.pip:
    name: "{{ airflow_package }}[{{ airflow_bundle_package | default(omit) }}]"
    version: "{{ airflow_version }}"
    state: present
    virtualenv: "{{ airflow_app_home }}"
    virtualenv_python: "python{{ airflow_python_version | default(omit) }}"
    extra_args: --no-cache-dir
  register: airflow_install
  environment:
    SLUGIFY_USES_TEXT_UNIDECODE: "yes"

- name: Airflow | Installing Airflow Extra Packages (prior to Ansible 2.7)
  become: true
  become_user: "{{ airflow_user }}"
  pip:
    name: "{{ airflow_package }}[{{ item }}]=={{ airflow_version }}"
    virtualenv: "{{ airflow_app_home }}"
    virtualenv_python: "python{{ airflow_python_version | default(omit) }}"
  with_items: "{{ airflow_extra_packages }}"
  when:
    - airflow_extra_packages is defined
    - not airflow_bundle_package
    - ansible_version.full is version_compare('2.7', '<')

- name: Airflow | Installing Airflow Extra Packages
  become: true
  become_user: "{{ airflow_user }}"
  ansible.builtin.pip:
    name: "apache-airflow[{{ airflow_extra_packages | join(', ') }}]"
    version: "{{ airflow_version }}"
    virtualenv: "{{ airflow_app_home }}"
    virtualenv_python: "python{{ airflow_python_version | default(omit) }}"
  when:
    - airflow_extra_packages is defined
    - not airflow_bundle_package
    - ansible_version.full is version_compare('2.7', '>=')

- name: Airflow | Installing DAGs dependencies
  become: true
  become_user: "{{ airflow_user }}"
  ansible.builtin.pip:
    name: "{{ item.name }}"
    version: "{{ item.version | default(omit) }}"
    virtualenv: "{{ airflow_app_home }}"
    virtualenv_python: "python{{ airflow_python_version | default(omit) }}"
    extra_args: "{{ item.extra_args | default(omit) }}"
  with_items: "{{ dags_dependencies }}"
  when: dags_dependencies is defined
  notify:
    "{{ ['restart'] | product(airflow_services.values() | map(attribute='service_name')) | map('join', ' ') | list }}"
